proxy-providers:
  provider1:
    url: ""
    type: http
    interval: 86400
    health-check: {enable: true,url: "https://www.gstatic.com/generate_204",interval: 300}
    override:
      additional-prefix: "[provider1]"

proxies:
  - name: "🟢 直连"
    type: direct
    udp: true

mixed-port: 7890
ipv6: true
allow-lan: true
unified-delay: true
tcp-concurrent: true
external-controller: 127.0.0.1:9090
external-ui: ui
external-ui-url: "https://github.com/MetaCubeX/metacubexd/archive/refs/heads/gh-pages.zip"

# 匹配进程 always/strict/off
find-process-mode: strict
global-client-fingerprint: chrome

# 策略组选择和fakeip缓存
profile:
  store-selected: true
  store-fake-ip: true

sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  skip-domain:
    - "Mijia Cloud"
    - "+.push.apple.com"

tun:
  enable: true
  stack: mixed
  dns-hijack:
    - "any:53"
    - "tcp://any:53"
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  ipv6: true
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-filter:
    - "+.lan"
    - "+.local"
    - "+.market.xiaomi.com"
  nameserver:
    - https://120.53.53.53/dns-query
    - https://223.5.5.5/dns-query
  proxy-server-nameserver:
    - https://120.53.53.53/dns-query
    - https://223.5.5.5/dns-query
  nameserver-policy:
    "rule-set:cn_domain,private_domain":
      - https://120.53.53.53/dns-query
      - https://223.5.5.5/dns-query
    "rule-set:geolocation-!cn":
      - "https://dns.cloudflare.com/dns-query"
      - "https://dns.google/dns-query"

proxy-groups:
  - name: 🚀 节点选择
    type: select
    proxies: [自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 🤡 YouTube
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 🦄 Google
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 👽 ChatGPT
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 📖 GitHub
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 🐔 Microsoft
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 🎵 TikTok
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 👻 Telegram
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 🎥 NETFLIX
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: ✈️ Speedtest
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 🕊️ Twitter
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 🛒 Alibaba
    type: select
    proxies: [🟢 直连, 🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点]

  - name: 🍅 Amazon
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  - name: 🍎 Apple
    type: select
    proxies: [🟢 直连, 🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点]

  - name: 🎯 国内
    type: select
    proxies: [🟢 直连, 🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点]

  - name: ⛔ 漏网之鱼
    type: select
    proxies: [🚀 节点选择, 自动选择, 香港节点, 台湾节点, 日本节点, 狮城节点, 美国节点, 全部节点, 🟢 直连]

  #分隔,下面是地区分组
  - name: 香港节点
    type: url-test
    include-all: true
    exclude-type: direct
    tolerance: 10
    filter: "(?i)港|hk|hongkong|hong kong"

  - name: 台湾节点
    type: url-test
    include-all: true
    exclude-type: direct
    tolerance: 10
    filter: "(?i)台|tw|taiwan"

  - name: 日本节点
    type: url-test
    include-all: true
    exclude-type: direct
    tolerance: 10
    filter: "(?i)日|jp|japan"

  - name: 美国节点
    type: url-test
    include-all: true
    exclude-type: direct
    tolerance: 10
    filter: "(?i)美|us|unitedstates|united states"

  - name: 狮城节点
    type: url-test
    include-all: true
    exclude-type: direct
    tolerance: 10
    filter: "(?i)(新|sg|singapore)"

  - name: 全部节点
    type: select
    include-all: true
    exclude-type: direct

  - name: 自动选择
    type: url-test
    include-all: true
    exclude-type: direct
    tolerance: 10

rules:
  - RULE-SET,private_domain,🟢 直连,no-resolve
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,ai_domain,👽 ChatGPT
  - RULE-SET,github_domain,📖 GitHub
  - RULE-SET,youtube_domain,🤡 YouTube
  - RULE-SET,google_domain,🦄 Google
  - RULE-SET,microsoft_domain,🐔 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,👻 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,twitter_domain,🕊️ Twitter
  - RULE-SET,amazon_domain,🍅 Amazon
  - RULE-SET,alibaba_domain,🛒 Alibaba
  - RULE-SET,cn_domain,🎯 国内
  - RULE-SET,geolocation-!cn,🚀 节点选择

  - RULE-SET,google_ip,🦄 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,👻 Telegram,no-resolve
  - RULE-SET,twitter_ip,🕊️ Twitter,no-resolve
  - RULE-SET,cn_ip,🎯 国内
  - MATCH,⛔ 漏网之鱼

rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}

rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs" }
  ai_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/category-ai-chat-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs" }
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs" }
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs" }
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs" }
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs" }
  twitter_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/twitter.mrs" }
  amazon_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/amazon.mrs" }
  alibaba_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/alibaba.mrs" }
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs" }
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs" }
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs" }
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs" }
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs" }
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs" }

  private_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/private.mrs" }
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs" }
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs" }
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs" }
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs" }
  twitter_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/twitter.mrs" }
